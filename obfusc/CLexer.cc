#define YY_CHAR unsigned char
#line 1 "C:\\Users\\L.Falcon\\Desktop\\\37777777724\37777777664\37777777664\37777777772\37777777702\37777777753\\obfusc\\flex_bison\\flexskel.cc"
/* A lexical scanner generated by flex */
/* scanner skeleton version:
 * $Header: c:\\Program\040Files\\Development\\CVS\040Repository/flex++/flexskel.cc,v 1.1.1.1 2002/04/13 06:01:32 Bear Exp $
 */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */
/* institutional financial group  */

/* theses symbols are added before this file */
/* #define YY_CHAR 'unsigned char' if 8bit or 'char' if 7bit */
/* #define FLEX_DEBUG if debug mode */
#define FLEX_SCANNER
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
/* Old MSC, before c7 */
#ifdef MSDOS
#ifndef _MSDOS
#define _MSDOS
#endif
#endif
/* turboc */
#ifdef __MSDOS__
#ifndef _MSDOS
#define _MSDOS
#endif
#endif

#ifdef __cplusplus
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#ifndef _MSDOS
#include <osfcn.h>
#endif
#else   /* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
int read();
#else
#include <stdlib.h>
#endif  /* __GNUC__ */
#define YY_USE_PROTOS
#define YY_USE_CONST
#endif  /* __STDC__ */
#endif  /* ! __cplusplus */
#ifdef __TURBOC__
#define YY_USE_CONST
#endif
#include <stdio.h>


/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
/* the "const" storage-class-modifier is valid */
#ifndef YY_USE_CONST
#define const
#endif
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif


/*********************/
/* parameters        */

/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif
/* size of default input buffer */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) 
#endif

/***********************************/
/* to be redefined for application */

/* returned upon end-of-file */
#define YY_END_TOK 0
/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* code executed at the end of each rule */
#define YY_BREAK break;

/* #define YY_USER_ACTION */
/* #define YY_USER_INIT */


#ifndef YY_USE_CLASS
/* copy whatever the last rule matched to the standard output */
/* cast to (char *) is because for 8-bit chars, yy___text is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yy___text, yy___leng, 1, yy___out )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifdef _MSDOS
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread(buf,1,max_size,yy___in)) < 0 ) \
	    YY_FATAL_ERROR( "fread() in flex scanner failed" );
#else
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yy___in), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );

#endif
/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 *      if ( something_happens )
 *              YY_FATAL_ERROR( "oops, the something happened" );
 *      else
 *              everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, yy___stderr  ); \
		(void) putc( '\n', yy___stderr  ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1


/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 
#else 
/* c++ */
#define ECHO yy___echo()
#define YY_INPUT(buf,result,max_size) \
	if ( yy___input((char *)buf, result,max_size) < 0 ) \
	    YY_FATAL_ERROR( "YY_INPUT() in flex scanner failed" );

#define YY_FATAL_ERROR(msg) yy___fatal_error(msg)
#define yywrap() yy___wrap()

#endif
/***********************************/
/* not to be changed */
#define YY_NULL 0
#define YY_END_OF_BUFFER_CHAR 0
/* special action meaning "start processing a new file" */
#define YY_NEW_FILE yy___newfile 
/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)



/* % section 1 definitions go here */ 
#line 1 "CLexer.l"
#define INITIAL 0
#define YY_CLexer_FLEX_SCANNER
#include "CLexer.h"
#line 51 "CLexer.l"
#line 196 "C:\\Users\\L.Falcon\\Desktop\\\37777777724\37777777664\37777777664\37777777772\37777777702\37777777753\\obfusc\\flex_bison\\flexskel.cc"

#define yy___stderr YY_CLexer_ERRFILE
#define yy___text YY_CLexer_TEXT
#define yy___leng YY_CLexer_LENG
#define yy___in YY_CLexer_IN
#define yy___out YY_CLexer_OUT
#define yy___newfile \
	do \
		{ \
		YY_CLexer_INIT_BUFFER( YY_CLexer_CURRENT_BUFFER, yy___in ); \
		YY_CLexer_LOAD_BUFFER_STATE(); \
		} \
	while ( 0 )
#if YY_CLexer_DEBUG != 0
#define yy___flex_debug YY_CLexer_DEBUG_FLAG
#endif


#ifdef YY_USE_CLASS

#define yy___echo YY_CLexer_ECHO
#define yy___input YY_CLexer_INPUT
#define yy___fatal_error YY_CLexer_FATAL_ERROR
#define yy___wrap YY_CLexer_WRAP

#endif

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yy___text
 */
#define YY_DO_BEFORE_ACTION \
	yy___text = yy_bp; \
/* % code to fiddle yy___text and yy___leng for yymore() goes here */ \
	yy___leng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yy___text */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yy___text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yy___text )



struct yy_buffer_state
    {
    YY_CLexer_IFILE  *yy_input_file;

    YY_CLexer_CHAR *yy_ch_buf;               /* input buffer */
    YY_CLexer_CHAR *yy_buf_pos;      /* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters */
    int yy_buf_size;    

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;          /* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */

#ifndef YY_USE_CLASS

#if YY_CLexer_DEBUG != 0
int YY_CLexer_DEBUG_FLAG=YY_CLexer_DEBUG_INIT;
#endif
#define YY_CURRENT_BUFFER YY_CLexer_CURRENT_BUFFER
static YY_BUFFER_STATE YY_CLexer_CURRENT_BUFFER;
/* yy_hold_char holds the character lost when yy___text is formed */
static YY_CLexer_CHAR yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */

/* GLOBAL */
YY_CLexer_CHAR *yy___text;
int yy___leng;

YY_CLexer_IFILE  *yy___in = (YY_CLexer_IFILE  *) 0;
YY_CLexer_OFILE *yy___out = (YY_CLexer_OFILE  *) 0;

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_CLexer_CHAR *yy_c_buf_p = (YY_CLexer_CHAR *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yy___in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_CLexer_CHAR c, YY_CLexer_CHAR *buf_ptr ));

#else
/* c++ */
#ifndef YY_CLexer_ECHO_NOCODE
void YY_CLexer_CLASS::yy___echo()
{YY_CLexer_ECHO_CODE
}
#endif
#ifndef YY_CLexer_INPUT_NOCODE
int  YY_CLexer_CLASS::yy___input(char * buffer,int &result,int max_size)
{YY_CLexer_INPUT_CODE
}
#endif
#ifndef YY_CLexer_FATAL_ERROR_NOCODE
void YY_CLexer_CLASS::yy___fatal_error(char *msg)
{YY_CLexer_FATAL_ERROR_CODE
}
#endif
#ifndef YY_CLexer_WRAP_NOCODE
int  YY_CLexer_CLASS::yy___wrap()
{YY_CLexer_WRAP_CODE
}
#endif
void YY_CLexer_CLASS::yy_initialize()
{
 yy___in=0;yy___out=0;yy_init = 1;
 yy_start=0;
 yy___text=0;yy___leng=0;
 YY_CLexer_CURRENT_BUFFER=0;
 yy_did_buffer_switch_on_eof=0;
 yy_c_buf_p=0;yy_hold_char=0;yy_n_chars=0;
#if YY_CLexer_DEBUG != 0
 YY_CLexer_DEBUG_FLAG=YY_CLexer_DEBUG_INIT;
#endif
}

YY_CLexer_CLASS::YY_CLexer_CLASS(YY_CLexer_CONSTRUCTOR_PARAM) YY_CLexer_CONSTRUCTOR_INIT
{yy_initialize();
 YY_CLexer_CONSTRUCTOR_CODE;
}
YY_CLexer_CLASS::~YY_CLexer_CLASS() 
{YY_CLexer_DESTRUCTOR_CODE;
 if(YY_CLexer_CURRENT_BUFFER)
  YY_CLexer_DELETE_BUFFER(YY_CLexer_CURRENT_BUFFER);
}

#endif


#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

/* % data tables for the DFA go here */ 
#define YY_END_OF_BUFFER 102
typedef int yy_state_type;
static const short int yy_accept[321] =
    {   0,
        0,    0,  102,  100,   99,   99,   87,  100,   93,   86,
      100,   81,   82,   91,   90,   78,   89,   85,   92,   44,
       44,   79,   75,   94,   80,   95,   98,   41,   41,   83,
       84,   96,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   76,   97,
       77,   88,   99,    1,   74,    0,   52,    0,   60,   77,
       69,   61,    0,    0,   58,   66,   56,   67,   57,   68,
        0,   47,    2,    3,   59,   48,   43,    0,   44,   44,
        0,   44,   44,   84,   76,   83,   65,   71,   73,   72,
       64,   41,    0,    0,   62,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   13,   41,   41,   41,   41,   41,
       41,   21,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   63,   70,    0,    1,    1,   45,   53,
        0,   47,    3,   47,    0,   48,   43,   43,   43,    0,
       46,   44,   44,   44,   44,    0,   42,   55,   54,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   19,   41,   41,   24,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,    0,   47,    0,   47,    0,   48,   43,
       43,   43,   43,   46,   44,   50,   51,   42,    0,   42,

       42,   41,   41,   41,    4,   41,    7,    8,   41,   41,
       41,   41,   15,   16,   41,   41,   20,   41,   25,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   38,   41,   41,    0,   47,   43,   50,    0,   50,
       51,    0,   42,   42,    0,   49,   42,   42,    5,   41,
       41,    6,   10,   41,   41,   41,   41,   18,   41,   41,
       41,   41,   29,   41,   41,   41,   41,   41,   41,   36,
       41,   41,   40,    0,   50,   50,    0,    0,   51,   49,
       42,   41,   41,   41,   41,   14,   17,   23,   41,   41,
       28,   30,   31,   32,   33,   34,   41,   41,   41,    0,

       50,   41,   41,   41,   12,   41,   41,   35,   41,   41,
        9,   41,   11,   26,   27,   37,   39,   41,   22,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,    1,   27,   28,   29,   27,   30,   31,
       32,   32,   33,   32,   32,   34,   32,   32,   32,   35,
       32,   32,   32,   32,   36,   32,   32,   37,   32,   32,
       38,   39,   40,   41,   42,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   32,   52,   53,   54,   55,
       56,   57,   32,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[71] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        1,    1,    1,    1,    1,    1,    4,    1,    5,    5,
        1,    1,    1,    1,    1,    1,    5,    5,    5,    5,
        5,    6,    6,    7,    7,    6,    6,    1,    1,    1,
        1,    6,    5,    5,    5,    5,    5,    5,    6,    6,
        6,    6,    7,    6,    6,    6,    7,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    1,    1,    1,    1
    } ;

static const short int yy_base[329] =
    {   0,
        0,   69,  522,  523,  523,  523,  497,   66,   49,   66,
      481,  523,  523,  495,   63,  523,   64,   62,   73,   89,
       82,  493,  523,   90,  493,   59,  523,    0,   86,  523,
      523,  492,   99,  454,  456,   74,   38,   40,   47,  457,
       67,  456,  464,   88,  445,  454,  452,  457,  523,   86,
      523,  523,  138,    0,  523,  125,  523,    0,  523,  523,
      523,  523,   68,  496,  523,  523,  523,  523,  523,  523,
      488,  127,  523,    0,  523,  136,  143,  162,  151,   99,
      487,  133,  180,  523,  523,  523,  479,  523,  523,  523,
      478,    0,  153,  462,  523,  444,  443,  444,  437,  449,

      436,  451,  438,  444,  430,  431,  428,  428,  431,  428,
      425,    0,   81,  429,  142,  427,   71,  145,  431,  424,
      147,  142,  429,  523,  523,  142,    0,    0,  523,  523,
      199,  523,    0,  201,  209,  523,  173,  171,  186,  152,
      224,  175,  523,  445,  425,    0,  225,  523,  523,  421,
      422,  432,  418,  430,  425,  413,  178,  427,  425,  421,
      413,  419,  422,    0,  408,  412,    0,  413,  410,  400,
      398,  400,  402,  409,  395,  393,  393,  405,  395,  399,
      403,  405,  394,  226,  231,  250,  523,  233,  237,  227,
      523,  412,  392,  523,  523,  239,  241,  247,  281,  246,

      251,  391,  386,  393,    0,  389,    0,    0,  380,  388,
      377,  384,    0,    0,  378,  375,    0,  379,    0,  374,
      374,  373,  370,  382,  372,  376,  381,  379,  369,  353,
      350,    0,  338,  344,  283,  286,  523,  523,  295,  284,
      523,  307,  255,  523,  305,  309,  354,  333,    0,  332,
      332,    0,    0,  326,  327,  332,  323,    0,  330,  316,
      324,  319,    0,  327,  324,  326,  309,  314,  316,    0,
      305,  308,    0,  311,  313,  523,  332,  316,  334,  523,
      523,  311,  290,  281,  278,    0,    0,    0,  275,  268,
        0,    0,    0,    0,    0,    0,  262,  260,  240,  330,

      336,  225,  224,  193,    0,  172,  166,    0,  171,  161,
        0,  110,    0,    0,    0,    0,    0,  100,    0,  523,
      389,  396,  399,  406,  413,  417,  116,  418
    } ;

static const short int yy_def[329] =
    {   0,
      320,    1,  320,  320,  320,  320,  320,  321,  320,  320,
      322,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  323,  323,  320,
      320,  320,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  320,  320,
      320,  320,  320,  324,  320,  321,  320,  321,  320,  320,
      320,  320,  322,  322,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  325,  320,  320,  320,  320,  320,  320,
      326,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  323,  321,  322,  320,  323,  323,  323,  323,  323,

      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  320,  320,  320,  324,  324,  320,  320,
      320,  320,  325,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  327,  326,  320,  320,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  327,  328,  320,  320,  320,

      320,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  320,  320,  320,  320,  320,  328,
      320,  320,  320,  320,  320,  320,  320,  320,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  320,  320,  320,  320,  320,  320,  320,
      320,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  320,

      320,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,    0,
      320,  320,  320,  320,  320,  320,  320,  320
    } ;

static const short int yy_nxt[594] =
    {   0,
        4,    5,    6,    5,    7,    8,    4,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   28,   28,   28,
       28,   28,   28,   29,   28,   28,   28,   30,    4,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   28,
       41,   28,   42,   28,   28,   28,   28,   43,   44,   45,
       46,   47,   48,   28,   28,   28,   49,   50,   51,   52,
       53,   57,   59,   60,   61,   54,   66,  129,   71,   68,
       72,   72,   90,   91,  104,   73,   67,   69,   70,   62,
       74,   93,  106,  105,  107,   94,   75,   85,   76,  109,

       83,   83,  110,  108,   58,   76,   64,   77,   77,  124,
       86,   78,   87,   88,  112,   79,  101,   80,   78,  173,
      196,  113,   79,  102,   80,   81,   96,   97,   78,  103,
       57,   98,  144,  166,   82,   78,  174,  116,  117,  126,
      167,   82,   80,  126,  127,   72,   72,  118,  127,   80,
      119,  145,   81,  125,  134,  134,  131,  132,   57,   76,
      132,   77,   77,   58,  319,  135,  136,  318,  143,  136,
      141,  141,   78,  131,  132,  140,  137,  140,  138,  132,
      141,  141,  135,  136,  142,  142,  143,  175,  136,   78,
      169,   58,  181,  143,  182,  139,   76,  179,   83,   83,

      170,  171,  176,  138,  192,  180,  190,  317,  191,   78,
      143,  143,  184,   79,  184,   80,  316,  185,  185,  134,
      134,  191,  188,  193,  188,  315,   78,  189,  189,  314,
      186,  187,   82,  191,  187,  143,  209,  210,  190,  313,
       80,  197,  141,  141,  185,  185,  191,  186,  187,  185,
      185,  189,  189,  187,  194,  189,  189,  194,  198,  199,
      200,  132,  191,  235,  132,  235,  312,  136,  236,  236,
      136,  194,  238,  239,  241,  242,  194,  201,  132,  247,
      243,  199,  244,  132,  136,  200,  244,  191,  311,  136,
      244,  238,  310,  241,  245,  239,  245,  242,  248,  246,

      246,  236,  236,  243,  236,  236,  309,  244,  274,  308,
      274,  244,  307,  275,  275,  244,  187,  276,  277,  187,
      278,  306,  278,  246,  246,  279,  279,  246,  246,  275,
      275,  275,  275,  187,  279,  279,  276,  305,  187,  280,
      277,  304,  280,  238,  303,  300,  238,  300,  301,  301,
      301,  301,  279,  279,  301,  301,  280,  302,  299,  298,
      238,  280,  297,  296,  241,  238,  276,  241,  295,  276,
      294,  293,  292,  291,  290,  289,  288,  287,  286,  285,
      284,  241,  283,  276,  282,  281,  241,  281,  276,   56,
      273,   56,   56,   56,   56,   56,   63,  272,  271,   63,

       63,   63,   63,   92,   92,   92,  128,  270,  128,  128,
      128,  128,  128,  133,  269,  133,  133,  133,  133,  133,
      147,  147,  240,  268,  240,  267,  266,  265,  264,  263,
      262,  261,  260,  259,  258,  257,  256,  255,  254,  253,
      252,  251,  250,  249,  237,  237,  234,  233,  232,  231,
      230,  229,  228,  227,  226,  225,  224,  223,  222,  221,
      220,  219,  218,  217,  216,  215,  214,  213,  212,  211,
      208,  207,  206,  205,  204,  203,  202,  195,  195,  183,
      178,  177,  172,  168,  165,  164,  163,  162,  161,  160,
      159,  158,  157,  156,  155,  154,  153,  152,  151,  150,

       64,  149,  148,  146,  130,   63,  123,  122,  121,  120,
      115,  114,  111,  100,   99,   95,   89,   84,   65,   64,
       55,  320,    3,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320

    } ;

static const short int yy_chk[594] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    8,    9,    9,   10,    2,   15,   63,   18,   17,
       18,   18,   26,   26,   37,   19,   15,   17,   17,   10,
       19,   29,   38,   37,   38,   29,   19,   24,   21,   39,

       21,   21,   39,   38,    8,   20,   63,   20,   20,   50,
       24,   21,   24,   24,   41,   21,   36,   21,   20,  117,
      327,   41,   20,   36,   20,   20,   33,   33,   21,   36,
       56,   33,   80,  113,   21,   20,  117,   44,   44,   53,
      113,   20,   21,  126,   53,   72,   72,   44,  126,   20,
       44,   80,   20,   50,   76,   76,   72,   72,   93,   77,
       72,   77,   77,   56,  318,   76,   76,  312,   82,   76,
      140,  140,   77,   72,   72,   78,   77,   78,   77,   72,
       78,   78,   76,   76,   79,   82,   79,  118,   76,   77,
      115,   93,  122,   82,  122,   77,   83,  121,   83,   83,

      115,  115,  118,   77,  138,  121,  137,  310,  137,   83,
      142,   79,  131,   83,  131,   83,  309,  131,  131,  134,
      134,  139,  135,  138,  135,  307,   83,  135,  135,  306,
      134,  134,   83,  137,  134,  142,  157,  157,  139,  304,
       83,  147,  141,  141,  184,  184,  139,  134,  134,  185,
      185,  188,  188,  134,  141,  189,  189,  141,  147,  147,
      147,  185,  190,  186,  185,  186,  303,  189,  186,  186,
      189,  141,  196,  196,  197,  197,  141,  147,  185,  200,
      198,  147,  198,  185,  189,  147,  201,  190,  302,  189,
      243,  196,  299,  197,  199,  196,  199,  197,  200,  199,

      199,  235,  235,  201,  236,  236,  298,  198,  239,  297,
      239,  201,  290,  239,  239,  243,  236,  240,  240,  236,
      242,  289,  242,  245,  245,  242,  242,  246,  246,  274,
      274,  275,  275,  236,  278,  278,  240,  285,  236,  246,
      240,  284,  246,  275,  283,  277,  275,  277,  300,  300,
      277,  277,  279,  279,  301,  301,  246,  282,  272,  271,
      275,  246,  269,  268,  279,  275,  301,  279,  267,  301,
      266,  265,  264,  262,  261,  260,  259,  257,  256,  255,
      254,  279,  251,  301,  250,  248,  279,  247,  301,  321,
      234,  321,  321,  321,  321,  321,  322,  233,  231,  322,

      322,  322,  322,  323,  323,  323,  324,  230,  324,  324,
      324,  324,  324,  325,  229,  325,  325,  325,  325,  325,
      326,  326,  328,  228,  328,  227,  226,  225,  224,  223,
      222,  221,  220,  218,  216,  215,  212,  211,  210,  209,
      206,  204,  203,  202,  193,  192,  183,  182,  181,  180,
      179,  178,  177,  176,  175,  174,  173,  172,  171,  170,
      169,  168,  166,  165,  163,  162,  161,  160,  159,  158,
      156,  155,  154,  153,  152,  151,  150,  145,  144,  123,
      120,  119,  116,  114,  111,  110,  109,  108,  107,  106,
      105,  104,  103,  102,  101,  100,   99,   98,   97,   96,

       94,   91,   87,   81,   71,   64,   48,   47,   46,   45,
       43,   42,   40,   35,   34,   32,   25,   22,   14,   11,
        7,    3,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320

    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

#if YY_CLexer_DEBUG != 0
static const short int yy_rule_linenum[101] =
    {   0,
       53,   54,   55,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
       85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
       96,   98,   99,  100,  101,  103,  104,  105,  106,  107,
      108,  111,  113,  114,  115,  116,  117,  118,  119,  120,
      121,  122,  123,  124,  125,  126,  127,  128,  129,  130,
      131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
      141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
      151,  152,  153,  154,  155,  156,  157,  158,  160,  161

    } ;

#endif
/* the intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#line 376 "C:\\Users\\L.Falcon\\Desktop\\\37777777724\37777777664\37777777664\37777777772\37777777702\37777777753\\obfusc\\flex_bison\\flexskel.cc"
#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
#else
#define yy_get_previous_state() ((yy_state_type)(yy_get_previous_state_()))
#define yy_try_NUL_trans(c) ((yy_state_type)(yy_try_NUL_trans_(c)))
#endif

#ifndef YY_USE_CLASS
#ifdef YY_CLexer_LEX_DEFINED
YY_CLexer_LEX_RETURN YY_CLexer_LEX ( YY_CLexer_LEX_PARAM )
YY_CLexer_LEX_PARAM_DEF
#else
YY_DECL
#endif
#else
YY_CLexer_LEX_RETURN YY_CLexer_CLASS::YY_CLexer_LEX ( YY_CLexer_LEX_PARAM)

#endif
    {
    register yy_state_type yy_current_state;
    register YY_CLexer_CHAR *yy_cp, *yy_bp;
    register int yy_act;

/* % user's declarations go here */ 


/* % end of prolog */ 
#line 401 "C:\\Users\\L.Falcon\\Desktop\\\37777777724\37777777664\37777777664\37777777772\37777777702\37777777753\\obfusc\\flex_bison\\flexskel.cc"

    if ( yy_init )
	{
	 
	 {
	 YY_USER_INIT;
	 }
	if ( ! yy_start )
	    yy_start = 1;       /* first start state */

	if ( ! yy___in )
	    yy___in = YY_CLexer_IFILE_DEFAULT;

	if ( ! yy___out )
	    yy___out = YY_CLexer_OFILE_DEFAULT;

	if ( YY_CLexer_CURRENT_BUFFER )
	    YY_CLexer_INIT_BUFFER( YY_CLexer_CURRENT_BUFFER, yy___in );
	else
	    YY_CLexer_CURRENT_BUFFER = YY_CLexer_CREATE_BUFFER( yy___in, YY_BUF_SIZE );

	YY_CLexer_LOAD_BUFFER_STATE();
	yy_init=0;
	}

    while ( 1 )         /* loops until end-of-file is reached */
	{
/* % yymore()-related code goes here */ 
#line 429 "C:\\Users\\L.Falcon\\Desktop\\\37777777724\37777777664\37777777664\37777777772\37777777702\37777777753\\obfusc\\flex_bison\\flexskel.cc"
	yy_cp = yy_c_buf_p;

	/* support of yy___text */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

/* % code to set up and find next match goes here */ 
	yy_current_state = yy_start;
	if ( yy_bp[-1] == '\n' )
	    ++yy_current_state;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 321 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    ++yy_cp;
	    }
	while ( yy_current_state != 320 );
	yy_cp = yy_last_accepting_cpos;
	yy_current_state = yy_last_accepting_state;
#line 440 "C:\\Users\\L.Falcon\\Desktop\\\37777777724\37777777664\37777777664\37777777772\37777777702\37777777753\\obfusc\\flex_bison\\flexskel.cc"

yy_find_action:
/* % code to find the action number goes here */ 
	yy_act = yy_accept[yy_current_state];
#line 443 "C:\\Users\\L.Falcon\\Desktop\\\37777777724\37777777664\37777777664\37777777772\37777777702\37777777753\\obfusc\\flex_bison\\flexskel.cc"

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:      /* this label is used only to access EOF actions */
#if YY_CLexer_DEBUG != 0
	if ( yy___flex_debug )
		{
		if ( yy_act == 0 )
#ifndef YY_CLexer_IOSTREAM
			fprintf( yy___stderr , "--scanner backtracking\n" );
#else
			yy___stderr <<"--scanner backtracking"<<endl;
#endif
		else if ( yy_act < YY_END_OF_BUFFER -1 )
#ifndef YY_CLexer_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting rule at line %d (\"%s\")\n",
			 yy_rule_linenum[yy_act], yy___text );
#else
			yy___stderr <<"--accepting rule at line "
                          <<(int)yy_rule_linenum[yy_act]
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER -1 )
#ifndef YY_CLexer_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting default rule (\"%s\")\n",
			 yy___text );
#else
			yy___stderr <<"--accepting default rule"
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER )
#ifndef YY_CLexer_IOSTREAM
			fprintf( yy___stderr , "--(end of buffer or a NUL)\n" );
#else
			yy___stderr <<"--(end of buffer or a NUL)"<<endl;
#endif
		else
#ifndef YY_CLexer_IOSTREAM
			fprintf( yy___stderr , "--EOF\n" );
#else
			yy___stderr <<"--EOF"<<endl;
#endif
		}
#endif
	switch ( yy_act )
	    {
/* % actions go here */ 
	    case 0: /* must backtrack */
	    /* undo the effects of YY_DO_BEFORE_ACTION */
	    *yy_cp = yy_hold_char;
	    yy_cp = yy_last_accepting_cpos;
	    yy_current_state = yy_last_accepting_state;
	    goto yy_find_action;

case 1:
#line 53 "CLexer.l"
{ preprocess(); }
	YY_BREAK
case 2:
#line 54 "CLexer.l"
{ comment(); }
	YY_BREAK
case 3:
#line 55 "CLexer.l"
{ /* consume //-comment */comment2(); }
	YY_BREAK
case 4:
#line 58 "CLexer.l"
{ return(CParser::AUTO); }
	YY_BREAK
case 5:
#line 59 "CLexer.l"
{ return(CParser::BOOL); }
	YY_BREAK
case 6:
#line 60 "CLexer.l"
{ return(CParser::BREAK); }
	YY_BREAK
case 7:
#line 61 "CLexer.l"
{ return(CParser::CASE); }
	YY_BREAK
case 8:
#line 62 "CLexer.l"
{ return(CParser::CHAR); }
	YY_BREAK
case 9:
#line 63 "CLexer.l"
{ return(CParser::COMPLEX); }
	YY_BREAK
case 10:
#line 64 "CLexer.l"
{ return(CParser::CONST); }
	YY_BREAK
case 11:
#line 65 "CLexer.l"
{ return(CParser::CONTINUE); }
	YY_BREAK
case 12:
#line 66 "CLexer.l"
{ return(CParser::DEFAULT); }
	YY_BREAK
case 13:
#line 67 "CLexer.l"
{ return(CParser::DO); }
	YY_BREAK
case 14:
#line 68 "CLexer.l"
{ return(CParser::DOUBLE); }
	YY_BREAK
case 15:
#line 69 "CLexer.l"
{ return(CParser::ELSE); }
	YY_BREAK
case 16:
#line 70 "CLexer.l"
{ return(CParser::ENUM); }
	YY_BREAK
case 17:
#line 71 "CLexer.l"
{ return(CParser::EXTERN); }
	YY_BREAK
case 18:
#line 72 "CLexer.l"
{ return(CParser::FLOAT); }
	YY_BREAK
case 19:
#line 73 "CLexer.l"
{ return(CParser::FOR); }
	YY_BREAK
case 20:
#line 74 "CLexer.l"
{ return(CParser::GOTO); }
	YY_BREAK
case 21:
#line 75 "CLexer.l"
{ return(CParser::IF); }
	YY_BREAK
case 22:
#line 76 "CLexer.l"
{ return(CParser::IMAGINARY); }
	YY_BREAK
case 23:
#line 77 "CLexer.l"
{ return(CParser::INLINE); }
	YY_BREAK
case 24:
#line 78 "CLexer.l"
{ return(CParser::INT); }
	YY_BREAK
case 25:
#line 79 "CLexer.l"
{ return(CParser::LONG); }
	YY_BREAK
case 26:
#line 80 "CLexer.l"
{ return(CParser::REGISTER); }
	YY_BREAK
case 27:
#line 81 "CLexer.l"
{ return(CParser::RESTRICT); }
	YY_BREAK
case 28:
#line 82 "CLexer.l"
{ return(CParser::RETURN); }
	YY_BREAK
case 29:
#line 83 "CLexer.l"
{ return(CParser::SHORT); }
	YY_BREAK
case 30:
#line 84 "CLexer.l"
{ return(CParser::SIGNED); }
	YY_BREAK
case 31:
#line 85 "CLexer.l"
{ return(CParser::SIZEOF); }
	YY_BREAK
case 32:
#line 86 "CLexer.l"
{ return(CParser::STATIC); }
	YY_BREAK
case 33:
#line 87 "CLexer.l"
{ return(CParser::STRUCT); }
	YY_BREAK
case 34:
#line 88 "CLexer.l"
{ return(CParser::SWITCH); }
	YY_BREAK
case 35:
#line 89 "CLexer.l"
{ return(CParser::TYPEDEF); }
	YY_BREAK
case 36:
#line 90 "CLexer.l"
{ return(CParser::UNION); }
	YY_BREAK
case 37:
#line 91 "CLexer.l"
{ return(CParser::UNSIGNED); }
	YY_BREAK
case 38:
#line 92 "CLexer.l"
{ return(CParser::VOID); }
	YY_BREAK
case 39:
#line 93 "CLexer.l"
{ return(CParser::VOLATILE); }
	YY_BREAK
case 40:
#line 94 "CLexer.l"
{ return(CParser::WHILE); }
	YY_BREAK
case 41:
#line 96 "CLexer.l"
{ return(check_type(theValue)); }
	YY_BREAK
case 42:
#line 98 "CLexer.l"
{ return(CParser::CONSTANT); }
	YY_BREAK
case 43:
#line 99 "CLexer.l"
{ return(CParser::CONSTANT); }
	YY_BREAK
case 44:
#line 100 "CLexer.l"
{ return(CParser::CONSTANT); }
	YY_BREAK
case 45:
#line 101 "CLexer.l"
{ return(CParser::CONSTANT); }
	YY_BREAK
case 46:
#line 103 "CLexer.l"
{ return(CParser::CONSTANT); }
	YY_BREAK
case 47:
#line 104 "CLexer.l"
{ return(CParser::CONSTANT); }
	YY_BREAK
case 48:
#line 105 "CLexer.l"
{ return(CParser::CONSTANT); }
	YY_BREAK
case 49:
#line 106 "CLexer.l"
{ return(CParser::CONSTANT); }
	YY_BREAK
case 50:
#line 107 "CLexer.l"
{ return(CParser::CONSTANT); }
	YY_BREAK
case 51:
#line 108 "CLexer.l"
{ return(CParser::CONSTANT); }
	YY_BREAK
case 52:
#line 111 "CLexer.l"
{ return(CParser::STRING_LITERAL); }
	YY_BREAK
case 53:
#line 113 "CLexer.l"
{ return(CParser::ELLIPSIS); }
	YY_BREAK
case 54:
#line 114 "CLexer.l"
{ return(CParser::RIGHT_ASSIGN); }
	YY_BREAK
case 55:
#line 115 "CLexer.l"
{ return(CParser::LEFT_ASSIGN); }
	YY_BREAK
case 56:
#line 116 "CLexer.l"
{ return(CParser::ADD_ASSIGN); }
	YY_BREAK
case 57:
#line 117 "CLexer.l"
{ return(CParser::SUB_ASSIGN); }
	YY_BREAK
case 58:
#line 118 "CLexer.l"
{ return(CParser::MUL_ASSIGN); }
	YY_BREAK
case 59:
#line 119 "CLexer.l"
{ return(CParser::DIV_ASSIGN); }
	YY_BREAK
case 60:
#line 120 "CLexer.l"
{ return(CParser::MOD_ASSIGN); }
	YY_BREAK
case 61:
#line 121 "CLexer.l"
{ return(CParser::AND_ASSIGN); }
	YY_BREAK
case 62:
#line 122 "CLexer.l"
{ return(CParser::XOR_ASSIGN); }
	YY_BREAK
case 63:
#line 123 "CLexer.l"
{ return(CParser::OR_ASSIGN); }
	YY_BREAK
case 64:
#line 124 "CLexer.l"
{ return(CParser::RIGHT_OP); }
	YY_BREAK
case 65:
#line 125 "CLexer.l"
{ return(CParser::LEFT_OP); }
	YY_BREAK
case 66:
#line 126 "CLexer.l"
{ return(CParser::INC_OP); }
	YY_BREAK
case 67:
#line 127 "CLexer.l"
{ return(CParser::DEC_OP); }
	YY_BREAK
case 68:
#line 128 "CLexer.l"
{ return(CParser::PTR_OP); }
	YY_BREAK
case 69:
#line 129 "CLexer.l"
{ return(CParser::AND_OP); }
	YY_BREAK
case 70:
#line 130 "CLexer.l"
{ return(CParser::OR_OP); }
	YY_BREAK
case 71:
#line 131 "CLexer.l"
{ return(CParser::LE_OP); }
	YY_BREAK
case 72:
#line 132 "CLexer.l"
{ return(CParser::GE_OP); }
	YY_BREAK
case 73:
#line 133 "CLexer.l"
{ return(CParser::EQ_OP); }
	YY_BREAK
case 74:
#line 134 "CLexer.l"
{ return(CParser::NE_OP); }
	YY_BREAK
case 75:
#line 135 "CLexer.l"
{ return(';'); }
	YY_BREAK
case 76:
#line 136 "CLexer.l"
{ return('{'); }
	YY_BREAK
case 77:
#line 137 "CLexer.l"
{ return('}'); }
	YY_BREAK
case 78:
#line 138 "CLexer.l"
{ return(','); }
	YY_BREAK
case 79:
#line 139 "CLexer.l"
{ return(':'); }
	YY_BREAK
case 80:
#line 140 "CLexer.l"
{ return('='); }
	YY_BREAK
case 81:
#line 141 "CLexer.l"
{ return('('); }
	YY_BREAK
case 82:
#line 142 "CLexer.l"
{ return(')'); }
	YY_BREAK
case 83:
#line 143 "CLexer.l"
{ return('['); }
	YY_BREAK
case 84:
#line 144 "CLexer.l"
{ return(']'); }
	YY_BREAK
case 85:
#line 145 "CLexer.l"
{ return('.'); }
	YY_BREAK
case 86:
#line 146 "CLexer.l"
{ return('&'); }
	YY_BREAK
case 87:
#line 147 "CLexer.l"
{ return('!'); }
	YY_BREAK
case 88:
#line 148 "CLexer.l"
{ return('~'); }
	YY_BREAK
case 89:
#line 149 "CLexer.l"
{ return('-'); }
	YY_BREAK
case 90:
#line 150 "CLexer.l"
{ return('+'); }
	YY_BREAK
case 91:
#line 151 "CLexer.l"
{ return('*'); }
	YY_BREAK
case 92:
#line 152 "CLexer.l"
{ return('/'); }
	YY_BREAK
case 93:
#line 153 "CLexer.l"
{ return('%'); }
	YY_BREAK
case 94:
#line 154 "CLexer.l"
{ return('<'); }
	YY_BREAK
case 95:
#line 155 "CLexer.l"
{ return('>'); }
	YY_BREAK
case 96:
#line 156 "CLexer.l"
{ return('^'); }
	YY_BREAK
case 97:
#line 157 "CLexer.l"
{ return('|'); }
	YY_BREAK
case 98:
#line 158 "CLexer.l"
{ return('?'); }
	YY_BREAK
case 99:
#line 160 "CLexer.l"
{ notValue(); }
	YY_BREAK
case 100:
#line 161 "CLexer.l"
{ /* Add code to complain about unmatched characters */ }
	YY_BREAK
case 101:
#line 163 "CLexer.l"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
    yyterminate();
#line 493 "C:\\Users\\L.Falcon\\Desktop\\\37777777724\37777777664\37777777664\37777777772\37777777702\37777777753\\obfusc\\flex_bison\\flexskel.cc"

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yy___text - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &YY_CLexer_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yy___text + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yy___text + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
/* % code to do backtracking for compressed tables and set up yy_cp goes here */ 
			    yy_cp = yy_last_accepting_cpos;
			    yy_current_state = yy_last_accepting_state;
#line 541 "C:\\Users\\L.Falcon\\Desktop\\\37777777724\37777777664\37777777664\37777777772\37777777702\37777777753\\obfusc\\flex_bison\\flexskel.cc"
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yy___text,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yy___text + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yy___text + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &YY_CLexer_CURRENT_BUFFER->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#if YY_CLexer_DEBUG != 0
#ifndef YY_CLexer_IOSTREAM
		fprintf(yy___stderr , "action # %d\n", yy_act );
#else
		yy___stderr <<"action # "<<(int)yy_act<<endl;
#endif
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
	yyterminate();/* avoid the no return value error message on MS-C7/dos */
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */
#ifndef YY_USE_CLASS
static int yy_get_next_buffer()
#else
int YY_CLexer_CLASS::yy_get_next_buffer()
#endif
    {
    register YY_CLexer_CHAR *dest = YY_CLexer_CURRENT_BUFFER->yy_ch_buf;
    register YY_CLexer_CHAR *source = yy___text - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &YY_CLexer_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yy___text;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( YY_CLexer_CURRENT_BUFFER->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = YY_CLexer_CURRENT_BUFFER->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&YY_CLexer_CURRENT_BUFFER->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move - YY_MORE_ADJ == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    YY_CLexer_CURRENT_BUFFER->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    YY_CLexer_CURRENT_BUFFER->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    YY_CLexer_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    YY_CLexer_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yy___text begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yy___text = &YY_CLexer_CURRENT_BUFFER->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state()
#else
long YY_CLexer_CLASS::yy_get_previous_state_()
#endif
    {
    register yy_state_type yy_current_state;
    register YY_CLexer_CHAR *yy_cp;

/* % code to get the start state into yy_current_state goes here */ 
    register YY_CHAR *yy_bp = yy___text;

    yy_current_state = yy_start;
    if ( yy_bp[-1] == '\n' )
	++yy_current_state;
#line 717 "C:\\Users\\L.Falcon\\Desktop\\\37777777724\37777777664\37777777664\37777777772\37777777702\37777777753\\obfusc\\flex_bison\\flexskel.cc"

    for ( yy_cp = yy___text + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
/* % code to find the next state goes here */ 
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	if ( yy_accept[yy_current_state] )
	    {
	    yy_last_accepting_state = yy_current_state;
	    yy_last_accepting_cpos = yy_cp;
	    }
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 321 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
#line 721 "C:\\Users\\L.Falcon\\Desktop\\\37777777724\37777777664\37777777664\37777777772\37777777702\37777777753\\obfusc\\flex_bison\\flexskel.cc"
	}

#ifndef YY_USE_CLASS
    return ( yy_current_state );
#else
    return (long)( yy_current_state );
#endif
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif
#else
long YY_CLexer_CLASS::yy_try_NUL_trans_(long yy_current_state_)
#endif

    {
#ifndef YY_USE_CLASS
#else
    yy_state_type yy_current_state=(yy_state_type)yy_current_state_;
#endif
    register int yy_is_jam;
/* % code to find the next state, and perhaps do backtracking, goes here */ 
    register YY_CHAR *yy_cp = yy_c_buf_p;

    register YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
	{
	yy_last_accepting_state = yy_current_state;
	yy_last_accepting_cpos = yy_cp;
	}
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 321 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 320);
#line 755 "C:\\Users\\L.Falcon\\Desktop\\\37777777724\37777777664\37777777664\37777777772\37777777702\37777777753\\obfusc\\flex_bison\\flexskel.cc"

#ifndef YY_USE_CLASS
    return ( yy_is_jam ? 0 : yy_current_state );
#else
    return (long)( yy_is_jam ? 0 : yy_current_state );
#endif
    }

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static void yyunput( YY_CLexer_CHAR c, register YY_CLexer_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_CLexer_CHAR c;
register YY_CLexer_CHAR *yy_bp;
#endif
#else
void YY_CLexer_CLASS::yyunput( YY_CLexer_CHAR c, YY_CLexer_CHAR *yy_bp )
#endif

    {
    register YY_CLexer_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yy___text */
    *yy_cp = yy_hold_char;

    if ( yy_cp < YY_CLexer_CURRENT_BUFFER->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_CLexer_CHAR *dest =
	    &YY_CLexer_CURRENT_BUFFER->yy_ch_buf[YY_CLexer_CURRENT_BUFFER->yy_buf_size + 2];
	register YY_CLexer_CHAR *source =
	    &YY_CLexer_CURRENT_BUFFER->yy_ch_buf[number_to_move];

	while ( source > YY_CLexer_CURRENT_BUFFER->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = YY_CLexer_CURRENT_BUFFER->yy_buf_size;

	if ( yy_cp < YY_CLexer_CURRENT_BUFFER->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yy___text again */
    }

#ifndef YY_USE_CLASS
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
#else
int YY_CLexer_CLASS::input()
#endif
    {
    int c;
    YY_CLexer_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &YY_CLexer_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yy___text = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yy___text + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yy___text + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
#else
		    YY_FATAL_ERROR( "unexpected last match in YY_CLexer_CLASS::input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_CLexer_RESTART( YY_CLexer_IFILE  *input_file )
#else
void YY_CLexer_RESTART( input_file )
YY_CLexer_IFILE  *input_file;
#endif
#else
void YY_CLexer_CLASS::YY_CLexer_RESTART ( YY_CLexer_IFILE  *input_file )
#endif

    {
    YY_CLexer_INIT_BUFFER( YY_CLexer_CURRENT_BUFFER, input_file );
    YY_CLexer_LOAD_BUFFER_STATE();
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_CLexer_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#else
void YY_CLexer_SWITCH_TO_BUFFER( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
#else
void YY_CLexer_CLASS::YY_CLexer_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#endif

    {
    if ( YY_CLexer_CURRENT_BUFFER == new_buffer )
	return;

    if ( YY_CLexer_CURRENT_BUFFER )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	YY_CLexer_CURRENT_BUFFER->yy_buf_pos = yy_c_buf_p;
	YY_CLexer_CURRENT_BUFFER->yy_n_chars = yy_n_chars;
	}

    YY_CLexer_CURRENT_BUFFER = new_buffer;
    YY_CLexer_LOAD_BUFFER_STATE();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_CLexer_LOAD_BUFFER_STATE( void )
#else
void YY_CLexer_LOAD_BUFFER_STATE()
#endif
#else
void YY_CLexer_CLASS::YY_CLexer_LOAD_BUFFER_STATE(  )
#endif

    {
    yy_n_chars = YY_CLexer_CURRENT_BUFFER->yy_n_chars;
    yy___text = yy_c_buf_p = YY_CLexer_CURRENT_BUFFER->yy_buf_pos;
    yy___in = YY_CLexer_CURRENT_BUFFER->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE YY_CLexer_CREATE_BUFFER( YY_CLexer_IFILE  *file, int size )
#else
YY_BUFFER_STATE YY_CLexer_CREATE_BUFFER( file, size )
YY_CLexer_IFILE  *file;
int size;
#endif
#else
YY_BUFFER_STATE YY_CLexer_CLASS::YY_CLexer_CREATE_BUFFER( YY_CLexer_IFILE  *file, int size )
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in YY_CLexer_CREATE_BUFFER()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_CLexer_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in YY_CLexer_CREATE_BUFFER()" );

    YY_CLexer_INIT_BUFFER( b, file );

    return ( b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_CLexer_DELETE_BUFFER( YY_BUFFER_STATE b )
#else
void YY_CLexer_DELETE_BUFFER( b )
YY_BUFFER_STATE b;
#endif
#else
void YY_CLexer_CLASS::YY_CLexer_DELETE_BUFFER( YY_BUFFER_STATE b )
#endif

    {
    if ( b == YY_CLexer_CURRENT_BUFFER )
	YY_CLexer_CURRENT_BUFFER = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_CLexer_INIT_BUFFER( YY_BUFFER_STATE b, YY_CLexer_IFILE  *file )
#else
void YY_CLexer_INIT_BUFFER( b, file )
YY_BUFFER_STATE b;
YY_CLexer_IFILE  *file;
#endif
#else
void YY_CLexer_CLASS::YY_CLexer_INIT_BUFFER( YY_BUFFER_STATE b, YY_CLexer_IFILE  *file)
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }
#line 163 "CLexer.l"


void CLexer::notValue()
{
	notValueText += (char *)theText;
}

void CLexer::comment(void)
{
	prestring2exstr();

	char c, prev = 0;
	notValueText += "/*";
	while ((c = yyinput()) != 0)      /* (EOF maps to 0) */
	{
		SetColumnLine4Input(c);
		//printf("%c",c);

		if (c == '/' && prev == '*') {
			notValueText += "/";
			break;
		}
		prev = c;
		notValueText += c;
	}
	/*error("unterminated comment");*/
	// add COMMENT to exstr
	exstr->addString(ExtraString::COMMENT, notValueText);
	notValueText = "";
}
void CLexer::comment2()
{
	char c;
	prestring2exstr();
	// read one more \n
	notValueText += (char *)theText;
	c = yyinput();
	if ( c != 0 ) {
		SetColumnLine4Input(c);
		notValueText += c;
	}

	// add COMMENT to exstr
	exstr->addString(ExtraString::COMMENT, notValueText);
	notValueText = "";
}

void CLexer::prestring2exstr()
{
	// add pre TYPESET to exstr
	if ( exstr == NULL ) {
		exstr = new ExtraString();
	}
	if ( !notValueText.empty() ) {
		exstr->addString(ExtraString::TYPESET, notValueText);
	}
	notValueText = "";
}
void CLexer::preprocess(void)
{
	prestring2exstr();

	char c;
	notValueText += (char *)theText;
	
	while ((c = yyinput()) != 0)      /* (EOF maps to 0) */
	{
		SetColumnLine4Input(c);
		//printf("%c",c);

		notValueText += c;
		if (c == '\n') {
			// because of notValueText at least will be "# \".length > 2
			if ( notValueText.length() > 2 &&
					notValueText[notValueText.length()-2] == '\\' ) {
				continue;
			} else {
				break;
			}
		}
	}

	// add PREPROCESS to exstr
	exstr->addString(ExtraString::PREPROCESS, notValueText);
	notValueText = "";
}


void CLexer::SetColumnLine4Input(char c)
{
	if (c == '\n') {
		theColumn = 1;
		theLine ++;
	}
	else if (c == '\t')
		theColumn += TAB_COLUMN - (theColumn % TAB_COLUMN);
	else
		theColumn++;

	
}

int CLexer::check_type(TokenValue &theValue)
{
	
	return CParser::IDENTIFIER;
}

// execute before every action in lex
void CLexer::BeginAction(void)
{
	// count the column & lineno
	int i;

	for (i = 0; theText[i] != '\0'; i++) {
		SetColumnLine4Input(theText[i]);
	}

	// echo theText
	//yy_echo();
};
